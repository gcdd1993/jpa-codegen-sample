package me.itlearner.jpacodegen.sample.web;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import com.querydsl.core.BooleanBuilder;
import me.itlearner.jpacodegen.sample.util.PageUtils;
import org.springframework.data.domain.Pageable;
import me.itlearner.jpacodegen.sample.entity.SampleUser;
import me.itlearner.jpacodegen.sample.form.SampleUserForm;
import me.itlearner.jpacodegen.sample.service.SampleUserService;
import java.lang.Integer;

import java.security.Principal;
import java.util.Optional;

/**
 * controller for SampleUser generated by jpa-codegen
 * TODO
 *
 * @author generated by jpa codegen
 * Created On 2019/09/10.
 */
@RestController
@RequestMapping("/sampleUser")
public class SampleUserController extends BaseController {

    @Autowired
    private SampleUserService sampleUserService;

    @PostMapping
    public ResponseEntity<?> create(@RequestBody @Validated SampleUserForm form) {
        SampleUser sampleUser = sampleUserService.create(form);
        return created(sampleUser);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<?> delete(@PathVariable("id") Integer id) {
        sampleUserService.delete(id);
        return deleted();
    }

    @PutMapping("/{id}")
    public ResponseEntity<?> update(@RequestBody @Validated SampleUserForm form,
                                    @PathVariable("id") Integer id) {
        Optional<SampleUser> sampleUser = sampleUserService.update(form, id);
        return created(sampleUser);
    }

    @GetMapping("/{id}")
    public ResponseEntity<?> get(@PathVariable("id") Integer id) {
        Optional<SampleUser> sampleUser = sampleUserService.get(id);
        return ok(sampleUser);
    }

    @GetMapping
    public ResponseEntity<?> page(@RequestParam(value = "page", required = false) Integer page,
                                  @RequestParam(value = "per_page", required = false) Integer perPage,
                                  Principal principal) {
        BooleanBuilder booleanBuilder = new BooleanBuilder();
        Pageable pageable = PageUtils.page(page, perPage, false);
        // TODO 业务逻辑
        return ok(sampleUserService.page(booleanBuilder, pageable));
    }

}