package me.itlearner.jpacodegen.sample.service;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.data.domain.Page;
import com.querydsl.core.BooleanBuilder;
import org.springframework.data.domain.Pageable;
import me.itlearner.jpacodegen.sample.util.PageUtils;
import me.itlearner.jpacodegen.sample.entity.SampleUser;
import me.itlearner.jpacodegen.sample.entity.repo.SampleUserRepository;
import me.itlearner.jpacodegen.sample.form.SampleUserForm;
import java.lang.Integer;

import java.util.Map;
import javax.transaction.Transactional;
import java.util.Optional;

/**
 * service for SampleUser generated by jpa-codegen
 * TODO
 *
 * @author generated by jpa codegen
 * Created On 2019/09/10.
 */
@Service
public class SampleUserService {

    @Autowired
    private SampleUserRepository sampleUserRepository;

    /**
     * 创建实体
     *
     * @param form 表单
     * @return 实体对象
     */
    @Transactional
    public SampleUser create(SampleUserForm form) {
        SampleUser sampleUser = new SampleUser();
        BeanUtils.copyProperties(form, sampleUser);
        // TODO 业务逻辑
        return sampleUserRepository.save(sampleUser);
    }

    /**
     * 删除实体
     * @param id 实体id
     */
    public void delete(Integer id) {
        sampleUserRepository.delete(id);
    }

    /**
     * 更新实体
     *
     * @param form 表单
     * @param id      实体id
     * @return 实体对象
     */
    @Transactional
    public SampleUser update(SampleUserForm form, Integer id) {
        SampleUser sampleUser = sampleUserRepository.findOne(id);
        BeanUtils.copyProperties(form, sampleUser);
        // TODO 业务逻辑
        return sampleUserRepository.save(sampleUser);
    }

    /**
     * 获取一个实体对象
     *
     * @param id 实体id
     * @return 实体对象
     */
    public SampleUser get(Integer id) {
        return sampleUserRepository.findOne(id);
    }

    /**
     * 分页接口
     *
     * @param booleanBuilder 分页查询条件
     * @param pageable       分页条件
     * @return 分页结果
     */
    public Map<String, Object> page(BooleanBuilder booleanBuilder, Pageable pageable) {
        Page<SampleUser> pageResult = sampleUserRepository.findAll(booleanBuilder,pageable);
        return PageUtils.pageResponse("sampleUser_list",
                pageResult.getContent(),
                pageable,
                pageResult.getTotalElements());
    }

}